# Generated by Django 4.2.7 on 2023-12-09 06:28

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('professions', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, validators=[users.validators.validate_username], verbose_name='Ник пользователя')),
                ('password', models.CharField(max_length=150, verbose_name='Пароль')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Адрес электронной почты')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя пользователя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия пользователя')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('username',),
                'default_related_name': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfessionUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='professions.profession', verbose_name='Пользователь')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Профессия пользователя',
                'verbose_name_plural': 'профессии пользователя',
                'default_related_name': 'profession_users',
            },
        ),
        migrations.CreateModel(
            name='LessonUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата завершения лекции')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='professions.lesson', verbose_name='Пользователь')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Лекция пользователя',
                'verbose_name_plural': 'Лекции пользователя',
                'default_related_name': 'leksion_users',
            },
        ),
        migrations.CreateModel(
            name='CourseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата подписки на курс')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='professions.course', verbose_name='Курсы')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Курс пользователя',
                'verbose_name_plural': 'Курсы пользователя',
                'default_related_name': 'course_users',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='course',
            field=models.ManyToManyField(through='users.CourseUser', to='professions.course', verbose_name='Курсы'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='lesson',
            field=models.ManyToManyField(through='users.LessonUser', to='professions.lesson', verbose_name='Лекции'),
        ),
        migrations.AddField(
            model_name='user',
            name='profession',
            field=models.ManyToManyField(through='users.ProfessionUser', to='professions.profession', verbose_name='Профессии'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='professionuser',
            constraint=models.UniqueConstraint(fields=('user', 'profession'), name='user_profession'),
        ),
        migrations.AddConstraint(
            model_name='lessonuser',
            constraint=models.UniqueConstraint(fields=('user', 'lesson'), name='user_lession'),
        ),
        migrations.AddConstraint(
            model_name='courseuser',
            constraint=models.UniqueConstraint(fields=('user', 'course'), name='user_course'),
        ),
    ]
